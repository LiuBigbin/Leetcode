Find the Duplicate Number 
Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.
Note:You must not modify the array (assume the array is read only).You must use only constant, O(1) extra space.Your runtime complexity should be less than O(n2).There is only one duplicate number in the array, but it could be repeated more than once.
Credits:Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.

class Solution {
public:
	//抽屉原理，每次查找小于n/2的数的个数，如果个数小于其实数到n/2数之间的数量，
	//说明重复的数大于n/2,否则的话说明重复的数就在起始数到n/2之间
     int findDuplicate(vector<int>& nums) {
        int min = 1;
		int max = nums.size()-1;
		while(min < max-1){
			int median = min + (max - min)/2;
			int count = 0;
			for(int i=0; i<nums.size(); i++){
				if(nums[i] < median)
					count++;
			}
			if(count>median-1){
				max = median;
			}
			else{
				min = median;
			}
		}
		int mincount = 0;
		for(int i=0; i<nums.size(); i++)
			if(nums[i] == min)
				mincount++;
		if(mincount > 1)
			return min;
		else return max;
		
    }
}


First Bad Version 
You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad. Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.
Credits:Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.

// Forward declaration of isBadVersion API.
bool isBadVersion(int version);

class Solution {
public:
    //相当于排列好的数组，该数组先递增后递减，找出最大的值
    //采用二分查找，注意有可能该坏的version在第一个或是最后一个
    int firstBadVersion(int n) {
        if(isBadVersion(1))
            return 1;
        if(isBadVersion(n) && !isBadVersion(n-1))
            return n;
            
        int first = 1;
        int end = n;
        while(first<end){
            int median = first + (end - first)/2;
            if(isBadVersion(median)){
                if(!isBadVersion(median-1))
                    return median;
                else{
                    end = median -1;
                }
            }
            else{
                 if(isBadVersion(median+1))
                    return median+1;
                else{
                    first = median+1;
                }
            }
                
            
        }
        return first;
    }
}


H-Index II 
Follow up for H-Index: What if the citations array is sorted in ascending order? Could you optimize your algorithm?  Expected runtime complexity is in O(log n) and the input is sorted.

class Solution {
public:
/*
    int hIndex(vector<int>& citations) {
        if(citations.size()==0)
            return 0;
        int first=0;
        int end = citations.size()-1;
        while(first < end){
            int median = first + (end - first)/2;
            int h = citations.size()-median-1;
            if(citations[median] >= h+1){
                if(citations[median -1] < h+2)
                    return h+1;
                else
                    end = median -1;
            }
            else{
                if(citations[median+1] >= h)
                    return h;
                else
                    first = first+1;
            }
        }
        int h = citations.size()-first-1;
        if(citations[first] >= h+1)
            return h+1;
        else
            return h;
    }
    */
    int hIndex(vector<int>& citations) {
        int size = citations.size();
        if (size == 0)
            return 0;
        
        int left = 0, right = size - 1;
        while (left < right){
            int mid = left + (right - left) / 2;
            if (size - mid > citations[mid])
                left = mid + 1;
            else
                right = mid;
        }
        //不太懂为什么放回的是citations[right]？？？？？
        return (size - right) < citations[right] ? (size - right) : citations[right];
    }
}


Search a 2D Matrix II 
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:Integers in each row are sorted in ascending from left to right.Integers in each column are sorted in ascending from top to bottom.For example,Consider the following matrix:[  [1,   4,  7, 11, 15],  [2,   5,  8, 12, 19],  [3,   6,  9, 16, 22],  [10, 13, 14, 17, 24],  [18, 21, 23, 26, 30]]Given target = 5, return true.Given target = 20, return false.

class Solution {
public:
    //以右上角的元素作为标准，但右上角的元素大于target时，那么可以删除掉最右的一列元素，否则删掉最上面的一行元素
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.size() == 0)
            return false;
        int row = 0;
        int col = matrix[0].size()-1;
        while(row<matrix.size() && col>=0){
            if(matrix[row][col] == target)
                return true;
            if(matrix[row][col] > target)
                col--;
            else
                row++;
        }
        return false;
    }
}


Kth Smallest Element in a BST 
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.
Note: You may assume k is always valid, 1 ≤ k ≤ BST's total elements.Follow up:What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?  Try to utilize the property of a BST.  What if you could modify the BST node's structure?  The optimal runtime complexity is O(height of BST).
Credits:Special thanks to @ts for adding this problem and creating all test cases.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        if(root == NULL)
            return 0;
        if(root->left != NULL){
            int num = kthSmallest(root->left, k);
            if(count == k)
                return num;
        }
        if(++count == k)
            return root->val;
        
        if(root->right != NULL){
            int num = kthSmallest(root->right, k);
            if(count == k)
                return num;
        }
       return 0;
        
    }
    
private:
    int count = 0;
}


Count Complete Tree Nodes 
Given a complete binary tree, count the number of nodes.Definition of a complete binary tree from Wikipedia:In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    //对于一个节点，只要其最左的高度个最右的高度一样，那么该树为满二叉树，直接使用公式计算节点个数，
    //如果不相等，那么则递归的计算其左子树的节点数和右子树的节点数，再加上1就是该节点树的节点个数，
    //该算法的时间之所以少，是应为只要一个节点的最左高度等于最右高度，那么节点树的节点个数就出来了，不用
    //再计算该节点数的其他节点了。对于完全二叉树来说，有很多的节点树是满二叉树，所以该算法可以减少很多节点的
    //计算量
    int countNodes(TreeNode* root) {
        if(root == NULL)
            return 0;
        TreeNode *l = root->left, *r = root->right;
        int lh = 1, rh = 1;
        while(l != NULL){
            lh++;
            l = l->left;
        }
        while(r != NULL){
            rh++;
            r = r->right;
        }
        if(rh == lh)
            return pow(2, lh)-1;
        return 1+countNodes(root->left)+countNodes(root->right);
    }
}


Minimum Size Subarray Sum 
Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum ≥ s. If there isn't one, return 0 instead.For example, given the array [2,3,1,2,4,3] and s = 7,the subarray [4,3] has the minimal length under the problem constraint.click to show more practice.More practice:If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).
Credits:Special thanks to @Freezen for adding this problem and creating all test cases.

class Solution {
public:
    //虽然不超时，但是运行时间比较慢,128ms
    /*
    int minSubArrayLen(int s, vector<int>& nums) {
        if(nums.size() == 0 || s == 0)
            return 0;
        
        return _minSubArrayLen(s, nums, 0);
        
    }
    
    int _minSubArrayLen(int s, vector<int>& nums, int start){
        int sum = 0;
        int length = 0;
        for(int i=start; i<nums.size(); i++){
            sum+=nums[i];
            length++;
            if(sum>=s)
                break;
                
        }
        int rest = 0;
        if(sum<s)
            return 0;
        rest = _minSubArrayLen(s, nums, start+1);
        if(rest == 0)
            return length;
        return length>rest? rest: length;
    }
    */
    // 4ms运行时间
    int minSubArrayLen(int s, vector<int>& nums) {

        if (nums.size() == 0) 
            return 0;

        int sumOfSubArr = nums[0];
        int start = 0;
        int result = nums.size();

        for (int i = 1; i<=nums.size(); i++) {
            while ((sumOfSubArr - nums[start]) >= s) {
                sumOfSubArr = sumOfSubArr - nums[start];
                start++;
            }    

            if (sumOfSubArr >= s && result > i - start) {
                 result = i - start;
            }

            if (i<nums.size()) {
                sumOfSubArr = sumOfSubArr + nums[i];
            }
        }
        return sumOfSubArr >= s ? result : 0;
    }

}


Dungeon Game 
table.dungeon, .dungeon th, .dungeon td {  border:3px solid black;} .dungeon th, .dungeon td {    text-align: center;    height: 70px;    width: 70px;}The demons had captured the princess (P) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (K) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess. The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately. Some of the rooms are guarded by demons, so the knight loses health (negative integers) upon entering these rooms; other rooms are either empty (0's) or contain magic orbs that increase the knight's health (positive integers).In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step. Write a function to determine the knight's minimum initial health so that he is able to rescue the princess.For example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path RIGHT->; RIGHT ->; DOWN ->; DOWN. -2 (K) -3 3   -5 -10 1   10 30 -5 (P)  Notes:The knight's health has no upper bound.Any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.  
Credits:Special thanks to @stellari for adding this problem and creating all test cases.

class Solution {
public:
    //动态规划算法
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int row = dungeon.size();
        int col = dungeon[0].size();
        int **point = new int*[row+1];
        for(int i=0; i<=row; i++){
            point[i] = new int[col+1];
        }
        for(int i=0; i<=row; i++)
            point[i][col] = INT_MAX;
        for(int i=0; i<=col; i++)
            point[row][i] = INT_MAX;
        point[row-1][col-1] = dungeon[row-1][col-1]>=0? 1: 1-dungeon[row-1][col-1];
        for(int i=row-1; i>=0; i--)
            for(int j=col-1; j>=0; j--){
                if(i == row-1 && j == col-1)
                    continue;
                point[i][j] = min(point[i][j+1], point[i+1][j]);
                if(dungeon[i][j]>=0)
                    point[i][j] = point[i][j]-dungeon[i][j]>0? point[i][j]-dungeon[i][j]: 1;
                else
                    point[i][j] = point[i][j]-dungeon[i][j];
                  
        }
        return point[0][0];
    }
}


Find Peak Element 
A peak element is an element that is greater than its neighbors.Given an input array where num[i] ≠ num[i+1], find a peak element and return its index.The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.You may imagine that num[-1] = num[n] = -∞.For example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2.click to show spoilers.
Note:Your solution should be in logarithmic complexity.
Credits:Special thanks to @ts for adding this problem and creating all test cases.

class Solution {
public:
    //O(lgN)的空间复杂度
    int findPeakElement(vector<int>& nums) {
        if(nums.size() == 0 || nums.size() == 1)
            return 0;
        return findPeakElement(nums, 0, nums.size()-1);
        
    }
    //查找峰值的一个标记就是对于当前的元素，如果左边的元素更大，说明峰值在左边，否则的话就是在右边
    //这里要注意，所得到的mid有可能就是要求的下标，所以在进行下一个循环的时候吧，不能mid+1
    //或是mid-1！！！
    int findPeakElement(vector<int>& nums, int begin, int end){
        int mid = begin + (end-begin)/2;
        //结束条件，就是不能再进范围缩减了
        if(mid == begin || mid == end){
            return nums[begin]>nums[end]? begin: end;
        }
        
        if(nums[mid]>nums[mid+1]){
            return findPeakElement(nums, begin, mid);
        }
        return findPeakElement(nums, mid, end);
    }
}


Find Minimum in Rotated Sorted Array II 
Follow up for "Find Minimum in Rotated Sorted Array":What if duplicates are allowed?Would this affect the run-time complexity? How and why?Suppose a sorted array is rotated at some pivot unknown to you beforehand.(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).Find the minimum element.The array may contain duplicates.

class Solution {
public:
    int findMin(vector<int>& nums) {
        if(nums.size() == 0)
            return 0;
        if(nums.size() == 1)
            return nums[0];
        for(int i=1; i<nums.size(); i++){
            if(nums[i] < nums[i-1])
                return nums[i];
        }
        return nums[0];
    }
}


Find Minimum in Rotated Sorted Array 
Suppose a sorted array is rotated at some pivot unknown to you beforehand.(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).Find the minimum element.You may assume no duplicate exists in the array.

class Solution {
public:
    //每次取中间结点，如果中间的数小于right的数，说明最小值在左边，如果中间的数大于right的数，说明最小值在右边
    //O(logN)
    /*4ms
    int findMin(vector<int>& nums) {
        int left = 0;
        int right = nums.size()-1;
        while(left<right){
            int medium = left + (right-left)/2;
            //最小值在左边
            if(nums[medium]<nums[right])
                right = medium;
            else
                left = medium+1;
                
        }
        return nums[left];
    }
    */
    //也可以遍历，只要num[i]大于nums[i+1],就说明nums[i+1]为最小值
    //4ms
    int findMin(vector<int>& nums){
        for(int i =0; i<nums.size()-1; i++){
            if(nums[i]>nums[i+1])
                return nums[i+1];
        }
        return nums[0];
    }
}


Search in Rotated Sorted Array II 
Follow up for "Search in Rotated Sorted Array":What if duplicates are allowed?Would this affect the run-time complexity? How and why?Write a function to determine if a given target is in the array.

class Solution {
public:

   //因为数组里面有多个相同的元素，所以在判断轴点的medium的左右边的时候麻烦了很多，
   //对于3,1,1\ 1,1,3,1\1,3,1,1,1等情况一般都没有考虑到，这里要特别的考虑相等的情况
    bool search(vector<int>& nums, int target) {
        if(nums.size() == 0)
            return false;
        int left = 0;
        int right = nums.size()-1;
        while(left < right){
            int medium = left + (right-left)/2;
            if(nums[medium] == target)
                return true;
            //轴点在medium的右边
            if(nums[medium]>nums[right] ){
                if(nums[medium]>target && target>=nums[left])
                    right = medium-1;
                else
                    left = medium+1;
            }
            else if(nums[medium]<nums[right]){
                if(nums[medium]<target && target<=nums[right])
                    left = medium+1;
                else
                    right = medium-1;
            }
            //判断相等的情况,要特别的考虑相等的情况
            else{
                int i = medium+1;
                while(i<right && nums[i] == nums[right]) i++;
                if(i == right)
                    right = medium-1;
                else
                    left = medium+1;
                        
            }
        }
        
        return nums[left] == target;
    }
}


Search a 2D Matrix 
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:Integers in each row are sorted from left to right.The first integer of each row is greater than the last integer of the previous row.For example,Consider the following matrix:[  [1,   3,  5,  7],  [10, 11, 16, 20],  [23, 30, 34, 50]]Given target = 3, return true.

class Solution {
public:
    //有两种方法：
    //1：每一次以右上角的元素作为比较值，比其大的，说明target不在最上面一行，递归查找剩下的矩阵，
    //   比其小的，说明不在最右边一列，递归查找剩下的矩阵
    //2：二分查找，先找出有可能在哪一行，再根据该行采用二分法继续查找
    //采用第二中方法
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.size() == 0)
            return false;
        int line = 0;
        //先二分定位行
        int top = 0;
        int bottom = matrix.size()-1;
        while(top<bottom-1){
            int medium = (top+bottom)/2;
            if(matrix[medium][0] == target)
                return true;
            if(matrix[medium][0] > target)
                bottom = medium-1;
            else
                top = medium;
        }
        if(matrix[bottom][0] <= target)
            line = bottom;
        else
            line = top;
        //在特定行中二分查找
        int left = 0;
        int right = matrix[line].size()-1;
        while(left<right){
            int medium = (left+right)/2;
            if(matrix[line][medium] == target)
                return true;
            if(matrix[line][medium]>target)
                right = medium-1;
            else
                left = medium+1;
        }
        return matrix[line][left] == target;
    }
}


Sqrt(x) 
Implement int sqrt(int x).Compute and return the square root of x.

class Solution {
public:

    //超时！！！
    /*
    int mySqrt(int x) {
        if(x == 1)
            return 1;
        long long medium = x/2;
        while(medium>0 && medium*medium>x)
            medium--;
        return medium;
    }
    */
    //二分查找
     // 8ms
     /*
     int mySqrt(int x) {
        if(x == 1)
            return 1;
        int end = x/2;
        int begin = 0;
        //防止溢出
        unsigned long long temp;
        while(begin<end){
            //防止溢出
            unsigned long long medium = (begin+end)/2;
            temp = medium*medium;
            if(temp == x)
                return medium;
            if(temp>x){
                temp = (medium-1)*(medium-1);
                if(temp < x)
                    return medium-1;
                end = medium-1;
            }
            else{
                temp = (medium+1)*(medium+1);
                if(temp>x)
                    return medium;
                begin = medium+1;
            }
        }
        return begin;
    }
    */
    
    //牛顿迭代法  8ms
    //迭代公式xi+1= (xi + n/xi) / 2
    
    int mySqrt(int x) {
        if(x <= 1)
            return x;
        double cur = 1;
        double pre = cur;
        do{
            pre = cur;
            cur = (pre+x/pre)/2.0;
        }while(abs(pre-cur)>0.00001);
        return (int)pre;
    }
    
   
    
}


Pow(x, n) 
Implement pow(x, n).

class Solution {
public:
    //TMD, temp的类型要double啊，靠！还有要考虑n为负整数！！！，还有负数n转换为整数的时候，不能直接的变为-n，因为有可能会溢出
    //所以可以先将n除以2，再来转为正整数，再根据n是否为偶数还是奇数来确定返回的是什么！！！，还有判断n是否为奇偶数的时候，要
    //使用n%2 != 0,而不能直接的使用n%2 != 1,因为负奇数的余数是-1 ！！！
    double myPow(double x, int n) {
        if(n<0){
            double temp = myPow(x, -(n/2));
            if(n%2 != 0)
                return 1/(temp*temp*x);
            return 1/(temp*temp);
        }
            
        if(n == 0)
            return 1;
        double temp = myPow(x, n/2);
        if(n%2 != 0){
            return temp*temp*x;
        }
         
        return temp*temp;
    }
}


Search Insert Position 
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.You may assume no duplicates in the array.Here are few examples.[1,3,5,6], 5 &amp;#8594; 2[1,3,5,6], 2 &amp;#8594; 1[1,3,5,6], 7 &amp;#8594; 4[1,3,5,6], 0 &amp;#8594; 0

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        if(nums.size() == 0)
            return 0;
        int left = 0;
        int right = nums.size()-1;
        while(left < right){
            int medium = left+(right-left)/2;
            if(nums[medium] == target)
                return medium;
            if(nums[medium]>target)
                right = medium-1;
            else{
                left = medium+1;
            }
        }
        if(nums[left] == target)
            return left;
        if(nums[left] <target)
            return left+1;
        return left;
    }
}


Search for a Range 
Given a sorted array of integers, find the starting and ending position of a given target value.Your algorithm's runtime complexity must be in the order of O(log n).If the target is not found in the array, return [-1, -1].For example,Given [5, 7, 7, 8, 8, 10] and target value 8,return [3, 4].

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.size() == 0)
            return {-1, -1};
        int left = 0;
        int right = nums.size()-1;
        int begin = -1;
        int end = -1;
        while(left < right){
            int medium = left + (right-left)/2;
            if(nums[medium] == target){
                if(medium == 0 || nums[medium-1] != target)
                    begin = medium;
                else
                    begin = getBegin(nums, target, left, medium-1);
                if(medium == nums.size()-1 || nums[medium+1] != target)
                    end = medium;
                else 
                    end = getEnd(nums, target, medium+1, right);
                 return {begin, end};   
            }
            if(nums[medium] < target)
                left = medium + 1;
            else
                right = medium - 1;
        }
        if(nums[left] == target){
            begin = left;
            end = left;
        }
        return {begin, end};
    }
    
    int getBegin(vector<int> &nums, int target, int start, int end){
        int left = start, right = end;
        while(left < right){
            int medium = left + (right-left)/2;
            if(nums[medium] == target){
                if(medium == 0 || nums[medium-1] != target)
                    return medium;
                else
                    return  getBegin(nums, target, left, medium-1);
            }
            if(nums[medium] < target)
                left = medium + 1;
            else
                right = medium - 1;
        }
        return  left;
    }
    
    int getEnd(vector<int> &nums, int target, int start, int end){
        int left = start, right = end;
        while(left < right){
            int medium = left + (right-left)/2;
            if(nums[medium] == target){
                if(medium == nums.size()-1 || nums[medium+1] != target)
                    return medium;
                else
                    return  getEnd(nums, target, medium+1, right);
            }
            if(nums[medium] < target)
                left = medium + 1;
            else
                right = medium - 1;
        }
        return  left;
    }
}


Search in Rotated Sorted Array 
Suppose a sorted array is rotated at some pivot unknown to you beforehand.(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).You are given a target value to search. If found in the array return its index, otherwise return -1.You may assume no duplicate exists in the array.

class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.size() == 0)
            return -1;
        if(nums.size() ==1 )
            return nums[0] == target? 0: -1;
        int left = 0, right = nums.size()-1;
        while(left < right-1){
            int medium = left + (right-left)/2;
            if(nums[medium] == target)
                return medium;
            if(nums[medium] < nums[right]){
                if(target <= nums[right] && target > nums[medium]){
                    left = medium+1;
                }
                else{
                    right = medium;
                }
            }
            else{
                if(target>nums[right] && target <nums[medium])
                    right = medium-1;
                else
                    left = medium;
            }
            
        }
        if(nums[left] == target)
            return left;
        if(nums[left+1] == target)
            return left+1;
        return -1;
    }
}


Divide Two Integers 
Divide two integers without using multiplication, division and mod operator.If it is overflow, return MAX_INT.

class Solution {
public:
    int divide(int dividend, int divisor) {
        //为了防止溢出，这里直接的将dividend和divisor赋值给long long 类型的变量
        long long newdividend = dividend;
        long long newdivisor = divisor;
        if(dividend == 0)
            return 0;
        if(divisor == 1)
            return dividend;
        if(dividend == INT_MIN && divisor == -1)
            return INT_MAX;
        if(dividend < 0 && divisor < 0)
            return _dividend(-newdividend, -newdivisor);
        if(dividend < 0)
            return -_dividend(-newdividend, newdivisor);
        if(divisor<0)
            return -_dividend(newdividend, -newdivisor);
        return _dividend(newdividend, newdivisor);
        
    }
    
    //直接的将被除数减去除数，看看总共可以减多少次，次数就是商，这样的话会超时
    //所以可以先将除数扩大，每次扩大两倍直到除数最接近被除数为止（此时除数应该小于被除数），建设扩大了i次两倍，
    //那么此时商的中间解为2*i,
    //然后在对余数进行同样的操作
    int _dividend(long long dividend, long long divisor){
        long long  temp ;
        int count = 0;
        int ret = 0;
        while(dividend>=divisor){
            temp = divisor<<1;
            //每次都要初始为0
            count = 0;
            if(temp > dividend)
                return ret+1;
            //除数先左移count次
            while(temp<dividend){
                count++;
                temp = (temp<<1);
                
            }
            //商每次都要加上对应的2*count值
            ret = ret + (1<<count);
            //减去扩大后所剩余的数，再赋值给被除数
            dividend = dividend - (temp>>1);
        }
        
        return ret;
    }
    

}


Median of Two Sorted Arrays 
There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

class Solution {
public:
    //将该问题 转换为寻找第K小的问题
    /*
    首先假设数组A和B的元素个数都大于k/2，我们比较A[k/2-1]和B[k/2-1]两个元素，这两个元素分别表示A的第k/2小的元素和B的第k/2小的元素。这两个元素比较共有三种情况：>、<和=。如果A[k/2-1]<B[k/2-1]，这表示A[0]到A[k/2-1]的元素都在A和B合并之后的前k小的元素中。换句话说，A[k/2-1]不可能大于两数组合并之后的第k小值，所以我们可以将其抛弃。

    证明也很简单，可以采用反证法。假设A[k/2-1]大于合并之后的第k小值，我们不妨假定其为第（k+1）小值。由于A[k/2-1]小于B[k/2-1]，所以B[k/2-1]至少是第（k+2）小值。但实际上，在A中至多存在k/2-1个元素小于A[k/2-1]，B中也至多存在k/2-1个元素小于A[k/2-1]，所以小于A[k/2-1]的元素个数至多有k/2+ k/2-2，小于k，这与A[k/2-1]是第（k+1）的数矛盾。

    当A[k/2-1]>B[k/2-1]时存在类似的结论。

    当A[k/2-1]=B[k/2-1]时，我们已经找到了第k小的数，也即这个相等的元素，我们将其记为m。由于在A和B中分别有k/2-1个元素小于m，所以m即是第k小的数。(这里可能有人会有疑问，如果k为奇数，则m不是中位数。这里是进行了理想化考虑，在实际代码中略有不同，是先求k/2，然后利用k-k/2获得另一个数。)

    通过上面的分析，我们即可以采用递归的方式实现寻找第k小的数。此外我们还需要考虑几个边界条件：

    如果A或者B为空，则直接返回B[k-1]或者A[k-1]；
    如果k为1，我们只需要返回A[0]和B[0]中的较小值；
    如果A[k/2-1]=B[k/2-1]，返回其中一个；
    */
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int total = nums1.size() + nums2.size();
        if(total & 1)
            return findK(nums1, 0, nums2, 0, total/2+1 );
        return (findK(nums1, 0, nums2, 0, total/2) + findK(nums1, 0, nums2, 0, total/2+1))/2;
    }
    
    double findK(vector<int> &nums1, int start1, vector<int> &nums2, int start2, int k){
        if(nums1.size()-start1 > nums2.size()-start2)
            return findK(nums2, start2, nums1, start1, k);
        if(start1 == nums1.size())
            return nums2[start2+k-1];
        if(k == 1)
            return min(nums1[start1], nums2[start2]);
        int ka = min(k/2, (int)nums1.size()-start1), kb = k - ka;
        if(nums1[start1+ka-1] == nums2[start2+kb-1])
            return nums1[start1+ka-1];
        if(nums1[start1+ka-1] < nums2[start2+kb-1])
            return findK(nums1, start1+ka, nums2, start2, k-ka);
        return findK(nums1, start1, nums2, start2+kb, k-kb);
    }
}


