Candy 
There are N children standing in a line. Each child is assigned a rating value. You are giving candies to these children subjected to the following requirements:Each child must have at least one candy.Children with a higher rating get more candies than their neighbors.What is the minimum candies you must give?

class Solution {
public:
    int candy(vector<int>& ratings) {
        if(ratings.size() == 0)
            return 0;
        int *candy = new int[ratings.size()];
        for(int i=0; i<ratings.size(); i++){
            candy[i] = 1;
        }
        
        for(int i=1; i<ratings.size(); i++)
            if(ratings[i]>ratings[i-1])
                candy[i] = candy[i-1]+1;
        for(int i=ratings.size()-2; i>=0; i--)
            if(ratings[i]>ratings[i+1]){
                candy[i] = candy[i]>(candy[i+1]+1)? candy[i]: (candy[i+1]+1);
            }
        int ret = 0;
        for(int i=0; i<ratings.size(); i++)
            ret += candy[i];
        return ret;
      
    }
}


Gas Station 
There are N gas stations along a circular route, where the amount of gas at station i is gas[i].You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.Return the starting gas station's index if you can travel around the circuit once, otherwise return -1.
Note:The solution is guaranteed to be unique.

class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        if(gas.size() == 0)
            return 0;
        
        int gasN = 0;
        int cosN = 0;
        //先保证可以到达
        for(int i=0; i<gas.size(); i++){
            gasN += gas[i];
            cosN += cost[i];
        }
        if(gasN<cosN)
            return -1;
        //在保证可以到达的情况下，才可安全的执行下面的程序
        int curgas = 0;
        int index = 0;
        for(int i=0; i<gas.size(); i++){
            curgas += gas[i];
            if(curgas<cost[i]){
                index = i+1;
                curgas = 0;
                continue;
            }
            curgas -= cost[i]; 
        }
        
        return index;
    }
}


Best Time to Buy and Sell Stock II 
Say you have an array for which the ith element is the price of a given stock on day i.Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int profit = 0;
        for(int i=1; i<prices.size(); i++){
            if(prices[i]>prices[i-1])
                profit += (prices[i]-prices[i-1]);
        }
        return profit;
    }
}


Jump Game 
Given an array of non-negative integers, you are initially positioned at the first index of the array.Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index.For example:A = [2,3,1,1,4], return true.A = [3,2,1,0,4], return false.

class Solution {
public:
    //先从右到左遍历数组，找到第一个为0的元素的下标index，然后以改下标为起点继续向左遍历，看看前面
    //的元素跳跃步骤能不能跳过为0的下标，判断公式为：index-i<nums[i],可以跳过，否则不能跳过。
    //注意有一个bug：如果终点为0，那么此时是要跳到里面去，而不是要绕过他的
    //解决方法是：终点0不为0无所谓，因为最后跳进去时已经到达了，不需要再往前跳，所以算法应该找到排除终点数值影响的第一个0元素下标
    bool canJump(vector<int>& nums) {
        //从倒数第二个元素开始
        int index = nums.size()-2;
        while(index>=0){
             while(index>=0 && nums[index] > 0) index--;
            if(index == -1)
                return true;
            int i=index-1;
            
            for(; i>=0; i--){
                if(index-i < nums[i])
                    break;
            }
            if(i == -1)
                return false;
            index = i-1;
        }
       return true;
    }
}


Jump Game II 
Given an array of non-negative integers, you are initially positioned at the first index of the array.Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps.For example:Given array A = [2,3,1,1,4]The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)
Note:You can assume that you can always reach the last index.

class Solution {
public:
    //采用贪心的方法，对于当前的位置i，找出[i, i+nums[i]]中一个下标k，使得nums[k]+k的值在[i, nums[i]+i]中最大
    //那么下一步就直接的跳到位置k上，继续遍历
    int jump(vector<int>& nums) {
        if(nums.size() <= 1)
            return 0;
        int size = nums.size();
        int count = 0;
        for(int i=0; i<nums.size(); i++){
            //如果当前的位置可以直接的跳到终点，那么直接的跳到终点
            if(nums[i]+i >= size-1)
                return count+1;
            int largest = 0;
            int index = i;
            //找出[i, i+nums[i]]中一个下标k，使得nums[k]+k的值在[i, nums[i]+i]中最大
            for(int j=i; j<=nums[i]+i; j++){
                if(largest<nums[j]+j){
                    largest = nums[j]+j;
                    index = j;
                }
            }
            //跳到index上，count值加1
            count++;
            i = index-1;
        }
    }
}


Wildcard Matching 
Implement wildcard pattern matching with support for '?' and '*'.'?' Matches any single character.'*' Matches any sequence of characters (including the empty sequence).The matching should cover the entire input string (not partial).The function prototype should be:bool isMatch(const char *s, const char *p)Some examples:isMatch("aa","a") → falseisMatch("aa","aa") → trueisMatch("aaa","aa") → falseisMatch("aa", "*") → trueisMatch("aa", "a*") → trueisMatch("ab", "?*") → trueisMatch("aab", "c*a*b") → false

class Solution {
public:
    //动态规划f[i][j]存储p[i:-1]能否匹配s[j:-1]
    //状态转换方程：
    //if(p[i] = [a-z]) f[i][j] = p[i]==s[j]&&f[i+1][j+1]
    //if(p[i] == '?') f[i][j] = f[i+1][j+1]
    //if(p[i] == '*') for(j<=k<=s.length) if(f[i+1][k]) f[i+1][j] = true
    bool isMatch(string s, string p) {
        if(s.length()==0 && p.length()==0)
            return true;
        if(p.length() == 0)
            return false;
        bool **f = new bool*[p.length()+1];
        for(int i=0; i<=p.length(); i++)
            f[i] = new bool[s.length()+1];
        for(int i=0; i<p.length(); i++)
            f[i][s.length()] = false;
        for(int i=0; i<s.length(); i++)
            f[p.length()][i] = false;
        f[p.length()][s.length()] = true;
        //处理p='****', s=""类型的情况
        int length = p.length()-1;
        while(p[length] == '*'){
            f[length][s.length()] = true;
            length--;
        }
        for(int i=p.length()-1; i>=0; i--){
            for(int j=s.length()-1; j>=0; j--){
                if(p[i] == '?')
                    f[i][j] = f[i+1][j+1];
                else if('a'<=p[i] && p[i]<='z')
                    f[i][j] = p[i]==s[j]&&f[i+1][j+1];
                else{
                    f[i][j] = false;
                    for(int k=j; k<=s.length(); k++){
                        if(f[i+1][k]){
                            f[i][j] = true;
                            break;
                        }
                    }
                    
                }
            }
        }
        return f[0][0];
    }
}


